#cifar
name: "CIFAR100_all_CNN_A"

layer {
  name: "cifar"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "/home/mrim/dutta/caffe-cudnn/incremental_learning/models/cifar100/mean.binaryproto"
  }
  image_data_param {
    source: "/scratch/dutta/cifar100_trainval_train.txt"
    #source: "/scratch/dutta/cifarR10_trainval_train.txt"
    #source: "/scratch/dutta/cifarR20_trainval_train.txt"
    batch_size: 100
    root_folder: "/scratch/dutta/cifar-100-train/"
  }
}


layer {
  name: "cifar"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "/home/mrim/dutta/caffe-cudnn/incremental_learning/models/cifar100/mean.binaryproto"
  }
  image_data_param {
    batch_size: 100
    #source: "/scratch/dutta/cifar100_trainval_val.txt"
    #validation set images are in train folder
    #root_folder: "/scratch/dutta/cifar-100-train/"

    #used after validation, for testing
    source: "/scratch/dutta/test_fine_labels.txt"
    root_folder: "/scratch/dutta/cifar-100-test/"

  }
}


#layer {
#  name: "drop_input"
#  type: "Dropout"
#  bottom: "data"
#  top: "drop_input"
#  dropout_param {
#    dropout_ratio: 0.2
#  }
#}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 96
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
		std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
    bottom: "conv1"
    top: "pool1"
    name: "pool1"
    type: "Pooling"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}


layer {
  name: "drop1"
  type: "Dropout"
  bottom: "pool1"
  top: "pool1"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
		std: 0.01
      
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}



layer {
    bottom: "conv2"
    top: "pool2"
    name: "pool2"
    type: "Pooling"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
    }
}

layer {
  name: "drop2"
  type: "Dropout"
  bottom: "pool2"
  top: "pool2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    #pad: 2
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
		std: 0.01
      
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer{
    name: "relu3"
    type: "ReLU"
    bottom: "conv3"
    top: "conv3"
}


layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 192
    #pad: 2
    stride: 1
    kernel_size: 1
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer{
    name: "relu4"
    type: "ReLU"
    bottom: "conv4"
    top: "conv4"
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 1
    stride: 1
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer{
    name: "relu5"
    type: "ReLU"
    bottom: "conv5"
    top: "conv5"
}

layer {
    bottom: "conv5"
    top: "pool3"
    name: "pool3"
    type: "Pooling"
    pooling_param {
        pool: AVE
        #kernel_size: 6
        global_pooling: true
    }
}

#layer{
#    name: "flatten"
#    type: "Flatten"
#    bottom: "pool3"
#    top: "ip1"
#}


layer{
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
  num_output: 100

    weight_filler {
        type: "gaussian"
		std: 0.01    
      }
  }
}

layer {
  name: "drop3"
  type: "Dropout"
  bottom: "ip1"
  top: "ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
